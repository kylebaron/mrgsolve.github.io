<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Events on mrgsolve</title>
    <link>/tags/events/index.xml</link>
    <description>Recent content in Events on mrgsolve</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/tags/events/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Model Gallery</title>
      <link>/topic/model-gallery/</link>
      <pubDate>Thu, 23 Feb 2017 08:00:00 +0000</pubDate>
      
      <guid>/topic/model-gallery/</guid>
      <description>&lt;!-- BLOGDOWN-HEAD --&gt;



&lt;!-- /BLOGDOWN-HEAD --&gt;

&lt;!-- BLOGDOWN-BODY-BEFORE --&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#load-packages-required-for-the-gallery&#34;&gt;Load packages required for the gallery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#simple-pk-model&#34;&gt;Simple PK model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pk-model-with-different-bioavability-and-dosing-lag-time&#34;&gt;PK model with different bioavability and dosing lag time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pk-model-with-residual-error&#34;&gt;PK model with residual error&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#indirect-response-model-driven-by-continuous-pk&#34;&gt;Indirect response model driven by continuous PK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#indirect-response-model-driven-by-metric-summarizing-exposure&#34;&gt;Indirect response model driven by metric summarizing exposure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#effect-compartment-model&#34;&gt;Effect compartment model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#population-pk-model-with-covariates-and-iov&#34;&gt;Population PK model with covariates and &lt;code&gt;IOV&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pk-with-dialysis-sessions-3-times-per-week&#34;&gt;PK with dialysis sessions 3 times per week&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#session-info&#34;&gt;Session Info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;!-- /BLOGDOWN-BODY-BEFORE --&gt;

&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(lattice)
library(ggplot2)
library(dplyr)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;load-packages-required-for-the-gallery&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Load packages required for the gallery&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(mrgsolve)
library(dplyr)
library(ggplot2)
library(magrittr)
library(tidyr)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;simple-pk-model&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Simple PK model&lt;/h1&gt;
&lt;p&gt;About this model specification code&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We set a simulation grid of 0.1 units in &lt;code&gt;$SET&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Compartment number (2) and names (&lt;code&gt;GUT&lt;/code&gt; and &lt;code&gt;CENT&lt;/code&gt;) are established in &lt;code&gt;$CMT&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;For dosing purposes, &lt;code&gt;GUT&lt;/code&gt; is compartment 1 and &lt;code&gt;CENT&lt;/code&gt; is compartment 2 due to the order of their declaration&lt;/li&gt;
&lt;li&gt;Compartment names and numbers can be checked with &lt;code&gt;init(mod)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;code &amp;lt;- &amp;#39;
$PARAM CL = 1.3, VC=28, KA=0.6

$SET delta=0.1

$CMT GUT CENT

$ODE
dxdt_GUT = -KA*GUT;
dxdt_CENT = KA*GUT - (CL/VC)*CENT;

$TABLE double CP = CENT/VC;

$CAPTURE CP
&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Compile and load&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mod &amp;lt;- mread(&amp;quot;gallery1&amp;quot;, tempdir(),code)


mod&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;. 
. 
. -------- mrgsolve model object (unix) --------
.   Project: /private/var/fol...dbsj0x4637ptj4hnd7kg900000gp/T/RtmpKM6RD6
.   source:        gallery1.cpp
.   shared object: gallery1-so-2991a740065 
. 
.   compile date:  
.   Time:          start: 0 end: 24 delta: 0.1
.   &amp;gt;              add: &amp;lt;none&amp;gt;
.   &amp;gt;              tscale: 1
. 
.   Compartments:  GUT CENT [2]
.   Parameters:    CL VC KA [3]
.   Omega:         0x0 
.   Sigma:         0x0 
. 
.   Solver:        atol: 1e-08 rtol: 1e-08
.   &amp;gt;              maxsteps: 2000 hmin: 0 hmax: 0&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;run-with-initial-value&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Run with initial value&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;out &amp;lt;- mod %&amp;gt;% init(GUT=1000) %&amp;gt;% mrgsim(end=72)

plot(out)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/topic/model-gallery/figures/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;out&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;. Model:  gallery1.cpp 
. Dim:    721 x 5 
. Time:   0 to 72 
. ID:     1 
.      ID time    GUT  CENT     CP
. [1,]  1  0.0 1000.0   0.0  0.000
. [2,]  1  0.1  941.8  58.1  2.075
. [3,]  1  0.2  886.9 112.5  4.019
. [4,]  1  0.3  835.3 163.6  5.841
. [5,]  1  0.4  786.6 211.3  7.547
. [6,]  1  0.5  740.8 256.0  9.145
. [7,]  1  0.6  697.7 297.9 10.639
. [8,]  1  0.7  657.0 337.1 12.038&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;run-with-events-object&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Run with &lt;code&gt;events&lt;/code&gt; object&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;out &amp;lt;- mod %&amp;gt;% ev(amt=1000, ii=12, addl=15) %&amp;gt;% mrgsim(end=336)

plot(out)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/topic/model-gallery/figures/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The events object was just a simple data set that looks like this&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dosing &amp;lt;- events(out)
dosing&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;. Events:
.   time cmt  amt ii addl evid
. 1    0   1 1000 12   15    1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;run-with-data-set&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Run with data set&lt;/h2&gt;
&lt;p&gt;Just like the events object, but we can make it more complicated, specify more people, etc…&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data &amp;lt;- expand.ev(amt=c(300,1000,3000), ii=12, addl=6) %&amp;gt;% mutate(dose=amt)
data&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;.   ID  amt ii addl evid cmt time dose
. 1  1  300 12    6    1   1    0  300
. 2  2 1000 12    6    1   1    0 1000
. 3  3 3000 12    6    1   1    0 3000&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;out &amp;lt;- mod %&amp;gt;% data_set(data) %&amp;gt;% carry.out(dose) %&amp;gt;% Req(CP) %&amp;gt;% mrgsim(end=168)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(out, CP~time|factor(dose),scales=&amp;quot;same&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/topic/model-gallery/figures/unnamed-chunk-11-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;pk-model-with-different-bioavability-and-dosing-lag-time&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;PK model with different bioavability and dosing lag time&lt;/h1&gt;
&lt;p&gt;About this model specification code&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Set &lt;code&gt;F_CENT&lt;/code&gt; and &lt;code&gt;ALAG_CENT&lt;/code&gt; in &lt;code&gt;$MAIN&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Since &lt;code&gt;F_CENT&lt;/code&gt; is set to &lt;code&gt;F1&lt;/code&gt; and &lt;code&gt;ALAG_CENT&lt;/code&gt; is set to &lt;code&gt;ALG&lt;/code&gt;; since &lt;code&gt;F1&lt;/code&gt; and &lt;code&gt;ALG&lt;/code&gt; are named in &lt;code&gt;$PARAM&lt;/code&gt;, we can update them on the &lt;code&gt;R&lt;/code&gt; side either through &lt;code&gt;param&lt;/code&gt; or in an input data set that is also determined on the &lt;code&gt;R&lt;/code&gt; side of things&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;code &amp;lt;- &amp;#39;
$PARAM CL = 1.3, VC=28, KA=0.6, ALG=0, F1=1,FORM=1

$SET delta=0.1

$CMT CENT

$MAIN
F_CENT = 1;

// Formulation 2 has lower bioavailability
if(FORM==2) F_CENT = F1;

// Same lag time across formulations
ALAG_CENT = ALG;


$ODE dxdt_CENT = - (CL/VC)*CENT;

$TABLE double CP = CENT/VC;

$CAPTURE CP

&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Compile and load&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mod &amp;lt;- mread(&amp;quot;gallery2&amp;quot;, tempdir(), code)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Dose into the central compartment. Also, &lt;code&gt;ALG&lt;/code&gt;, &lt;code&gt;F1&lt;/code&gt;, and &lt;code&gt;FORM&lt;/code&gt; are updated via the data set and therefore need to be columns in the data set and listed in &lt;code&gt;$PARAM&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data &amp;lt;- 
  expand.ev(amt=1000, ALG=seq(0,12,4),FORM=c(1,2)) %&amp;gt;% 
  mutate(F1 = ifelse(FORM==1,1,0.5))

data&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;.   ID  amt ALG FORM evid cmt time  F1
. 1  1 1000   0    1    1   1    0 1.0
. 2  2 1000   4    1    1   1    0 1.0
. 3  3 1000   8    1    1   1    0 1.0
. 4  4 1000  12    1    1   1    0 1.0
. 5  5 1000   0    2    1   1    0 0.5
. 6  6 1000   4    2    1   1    0 0.5
. 7  7 1000   8    2    1   1    0 0.5
. 8  8 1000  12    2    1   1    0 0.5&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;out &amp;lt;- mod %&amp;gt;% data_set(data) %&amp;gt;% carry.out(FORM,ALG) %&amp;gt;% mrgsim(end=72)

plot(out, CP~time|factor(FORM),group=ALG, 
     scales=&amp;quot;same&amp;quot;, auto.key=list(columns=4))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/topic/model-gallery/figures/unnamed-chunk-14-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;pk-model-with-residual-error&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;PK model with residual error&lt;/h1&gt;
&lt;p&gt;About this model specification code&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$SIGMA&lt;/code&gt; sets the variance of &lt;code&gt;EPS(n)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Setting &lt;code&gt;end&lt;/code&gt; to a value less than 0 will signal &lt;code&gt;mrgsolve&lt;/code&gt; to skip the simulation time grid&lt;/li&gt;
&lt;li&gt;We specify &lt;code&gt;add&lt;/code&gt; to get a specific set of simulation times (not necessarily evenly spaced)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;code &amp;lt;- &amp;#39;
$PARAM CL = 1.3, VC=28, KA=0.6

$GLOBAL #define CP (CENT/VC)

$SIGMA 0.025

$SET end=-1, add=c(0,0.25,0.5,1,2,4,6,8,10,12,16,24,36,48)

$CMT GUT CENT

$ODE
dxdt_GUT = -KA*GUT;
dxdt_CENT = KA*GUT - (CL/VC)*CENT;

$CAPTURE CP DV

$TABLE double DV = CP*exp(EPS(1));
&amp;#39;

mod &amp;lt;- mread(&amp;quot;ruv&amp;quot;, tempdir(), code) &lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(3203)
out &amp;lt;- 
  mod %&amp;gt;% 
  init(GUT=1000) %&amp;gt;% 
  obsonly %&amp;gt;% 
  mrgsim(Req=&amp;quot;CP,DV&amp;quot;) %&amp;gt;% as.data.frame

ggplot(data=out, aes(x=time)) + 
  geom_point(aes(y=DV),size=3) + 
  geom_line(aes(y=CP), col=&amp;quot;firebrick&amp;quot;,lwd=1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/topic/model-gallery/figures/unnamed-chunk-16-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;indirect-response-model-driven-by-continuous-pk&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Indirect response model driven by continuous PK&lt;/h1&gt;
&lt;p&gt;About this model specification code&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CP&lt;/code&gt; is “defined” in &lt;code&gt;$GLOBAL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;INH&lt;/code&gt; is declared as a double precision variable in &lt;code&gt;$ODE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;INH&lt;/code&gt; will be available globally (&lt;code&gt;mrgsolve&lt;/code&gt; will declare the variable in &lt;code&gt;$GLOBAL&lt;/code&gt; for you)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;INH&lt;/code&gt; can be changed at any time, but &lt;code&gt;CP&lt;/code&gt; cannot&lt;/li&gt;
&lt;li&gt;Both &lt;code&gt;CP&lt;/code&gt; and &lt;code&gt;INH&lt;/code&gt; can be inserted into output in &lt;code&gt;$TABLE&lt;/code&gt; or &lt;code&gt;$CAPTURE&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;code &amp;lt;- &amp;#39;
$PARAM CL = 5.3, VC=28, KA=0.6, KIN=20, KOUT=0.01, IC50=10

$SET delta=0.1

$CMT GUT CENT RESPONSE

$GLOBAL
#define CP (CENT/VC)

$MAIN
RESPONSE_0 = KIN/KOUT;

$ODE

double INH = CP/(IC50+CP);

dxdt_GUT = -KA*GUT;
dxdt_CENT = KA*GUT - (CL/VC)*CENT;

dxdt_RESPONSE = KIN*(1-INH) - KOUT*RESPONSE;


$CAPTURE CP INH
&amp;#39;

mod &amp;lt;- mread(&amp;quot;gallery3&amp;quot;, tempdir(), code)

out &amp;lt;- mod %&amp;gt;% 
  ev(time=120,amt=1500,rate=5) %&amp;gt;% 
  Req(CP,RESPONSE) %&amp;gt;% mrgsim(end=480*2)

plot(out)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/topic/model-gallery/figures/unnamed-chunk-17-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;indirect-response-model-driven-by-metric-summarizing-exposure&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Indirect response model driven by metric summarizing exposure&lt;/h1&gt;
&lt;p&gt;About this model specification code&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Take out the PK model&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AUC&lt;/code&gt; will drive the PD model&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AUC&lt;/code&gt; is declared in &lt;code&gt;$PARAM&lt;/code&gt;; we will manipulate that value (AUC&amp;gt;0 for on treatment, AUC==0 for off treatment) through the input data set&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;code &amp;lt;- &amp;#39;
$PARAM AUC=0, KIN=100, KOUT=0.2, AUC50=10

$SET delta=0.1

$CMT RESPONSE

$GLOBAL
#define INH (AUC/(AUC50+AUC))

$MAIN
RESPONSE_0 = KIN/KOUT;

$ODE

dxdt_RESPONSE = KIN*(1-INH) - KOUT*RESPONSE;

$CAPTURE AUC
&amp;#39;

mod &amp;lt;- mread(&amp;quot;gallery5&amp;quot;, tempdir(), code)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Make a template data set with &lt;code&gt;evid&lt;/code&gt;=2 and &lt;code&gt;AUC&lt;/code&gt; to drive the PD model&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data &amp;lt;- 
  ev(ID=1,evid=2,AUC=15, ii=48,addl=0,amt=0) %then% 
  ev(ID=1,evid=2,AUC=0,amt=0)

data&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;. Events:
.   ID time cmt AUC ii addl amt evid
. 1  1    0   1  15 48    0   0    2
. 2  1   48   1   0  0    0   0    2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;out &amp;lt;- mod %&amp;gt;% data_set(data) %&amp;gt;% obsonly %&amp;gt;% mrgsim(end=120)

plot(out)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/topic/model-gallery/figures/unnamed-chunk-19-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;effect-compartment-model&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Effect compartment model&lt;/h1&gt;
&lt;p&gt;About this model specification code&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This code replicates model PD21 in Gabrielsson and Weiner 2007.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;code &amp;lt;- &amp;#39;
$PARAM  
VC = 2.44, KA = 0.92, K10 = 0.44, K12 = 0.36, K21 = 0.24
E0 = 157, EMAX = 29.95, EC50=4.956, KEO=1.305

$SET delta=0.1, end=36

$CMT GUT CENT PERIPH CE

$ODE 
double CP = CENT/VC;

dxdt_GUT = -KA*GUT;
dxdt_CENT = KA*GUT - K10*CENT - K12*CENT + K21*PERIPH;
dxdt_PERIPH = K12*CENT - K21*PERIPH;
dxdt_CE = KEO*(CP-CE);

$TABLE
capture EFFECT = E0 - EMAX*CE/(CE+EC50);
CP = CENT/VC;

$CAPTURE EFFECT CP
&amp;#39;

mod &amp;lt;- mread(&amp;quot;effcmt&amp;quot;, tempdir(), code)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Simulate a snigle 200 unit dose&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;out &amp;lt;- mod %&amp;gt;% ev(amt=200) %&amp;gt;% obsonly %&amp;gt;% mrgsim(Req=&amp;quot;CP,CE,EFFECT&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(out)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/topic/model-gallery/figures/unnamed-chunk-22-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Simulate steady state PK/PD under Q12 hour dosing&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;out &amp;lt;- 
  mod %&amp;gt;% 
  ev(amt=200,ss=1,ii=12,addl=10)%&amp;gt;%
  mrgsim(Req=&amp;quot;CP,CE,EFFECT&amp;quot;, end=168)

plot(out)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/topic/model-gallery/figures/unnamed-chunk-23-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;population-pk-model-with-covariates-and-iov&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Population PK model with covariates and &lt;code&gt;IOV&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;About this control stream&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;IOV&lt;/code&gt; is declared as double precision variable that is set to either &lt;code&gt;ETA(4)&lt;/code&gt; or &lt;code&gt;ETA(5)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;We need to make sure that &lt;span class=&#34;math inline&#34;&gt;\(\omega^2_{4}\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(\omega^2_{5}\)&lt;/span&gt; are equal&lt;/li&gt;
&lt;li&gt;We assign different names to the first and second &lt;code&gt;$OMEGA&lt;/code&gt; matrices so we can update them by name later&lt;/li&gt;
&lt;li&gt;We are tabling out some &lt;code&gt;ETAs&lt;/code&gt; to look at them later as well; this is for demonstration purposes&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;code &amp;lt;- &amp;#39;
$PARAM TVCL = 1.3, TVVC=28, TVKA=0.6, WT=70, OCC=1

$SET delta=0.1

$CMT GUT CENT

$MAIN

double IOV = EOC1;
if(OCC==2) IOV = EOC2;

double CLi = exp(log(TVCL) + 0.75*log(WT/70) + ECL + IOV);
double VCi = exp(log(TVVC) + EVC);
double KAi = exp(log(TVKA) + EKA);

$OMEGA 
@name IIV @labels ECL EVC EKA
0 0 0
$OMEGA @name IOV @labels EOC1 EOC2
0 0

$SIGMA 0

$ODE
dxdt_GUT = -KAi*GUT;
dxdt_CENT = KAi*GUT - (CLi/VCi)*CENT;

$TABLE
double CP = CENT/VCi;
double ETA1 = ETA(1);
double ETA2 = ETA(2);

$CAPTURE IOV CP ETA1 ETA2
&amp;#39;

mod &amp;lt;- mread(&amp;quot;gallery4&amp;quot;, tempdir(), code)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Set up dosing events; occasion 2 is the second dose&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dose &amp;lt;- ev(amt=300,OCC=1) + ev(amt=300,time=48,OCC=2)
dose&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;. Events:
.   time cmt amt OCC evid
. 1    0   1 300   1    1
. 2   48   1 300   2    1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ETAs are all zeros per the model specification code&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;out &amp;lt;- mod %&amp;gt;% ev(dose) %&amp;gt;% mrgsim(end=120, nid=5)

plot(out)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/topic/model-gallery/figures/unnamed-chunk-26-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Update &lt;code&gt;$OMEGA&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mod &amp;lt;- mod %&amp;gt;% omat(IIV=cmat(0.1, 0.45, 0.3, 0,0,0), IOV=dmat(0.5,0.5))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And check the result&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;revar(mod)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;. $omega
. $IIV
.             [,1]       [,2] [,3]
. ECL:  0.10000000 0.07794229    0
. EVC:  0.07794229 0.30000000    0
. EKA:  0.00000000 0.00000000    0
. 
. $IOV
.        [,1] [,2]
. EOC1:   0.5  0.0
. EOC2:   0.0  0.5
. 
. 
. $sigma
. $...
.     [,1]
. 1:     0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Simulate and plot&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;out &amp;lt;- mod %&amp;gt;% ev(dose) %&amp;gt;% mrgsim(end=120,nid=5,seed=9765)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ETAs&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(out,ETA1+ETA2+IOV~time|factor(ID),scales=&amp;quot;same&amp;quot;, layout=c(5,3))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/topic/model-gallery/figures/unnamed-chunk-30-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;PK&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(out,CP~time|factor(ID),scales=&amp;quot;same&amp;quot;, layout=c(5,1))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/topic/model-gallery/figures/unnamed-chunk-31-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Just look at WT with no IIV/IOV&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mod &amp;lt;- mod %&amp;gt;% drop.re&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data &amp;lt;- expand.ev(amt=300,ii=12, addl=19,WT=seq(40,140,20))

out &amp;lt;- mod %&amp;gt;% data_set(data) %&amp;gt;% Req(CP) %&amp;gt;% mrgsim(end=240, carry.out=&amp;quot;WT&amp;quot;)

out %&amp;gt;% 
  as.tbl %&amp;gt;%
  ggplot(data=., aes(x=time, y=CP,col=WT,group=ID)) + 
  geom_line(lwd=1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/topic/model-gallery/figures/unnamed-chunk-33-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Cmin versus weight&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;out %&amp;gt;% subset(time==240) %&amp;gt;%
  ggplot(data=.,aes(x=WT,y=CP)) + 
  geom_line(lwd=1) + geom_point(size=3) + xlab(&amp;quot;Cmin&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/topic/model-gallery/figures/unnamed-chunk-34-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;pk-with-dialysis-sessions-3-times-per-week&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;PK with dialysis sessions 3 times per week&lt;/h1&gt;
&lt;div id=&#34;section&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;’&lt;/h2&gt;
&lt;p&gt;About this control stream&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GUT&lt;/code&gt; and &lt;code&gt;CENT&lt;/code&gt; are regular compartment; we have to provide a differential equation for each&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DIAL&lt;/code&gt; is a compartment that only holds a value; &lt;code&gt;dxdt_DIAL&lt;/code&gt; will automatically be set to &lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CLadd&lt;/code&gt; is the additional drug clearance while on dialysis&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;code &amp;lt;- &amp;#39;
$PARAM CL=0.7, VC=16, KA=1.8, CLadd = 2.1

$CMT GUT CENT

$VCMT DIAL

$ODE
dxdt_GUT = -KA*GUT;

dxdt_CENT = KA*GUT -  (CL + CLadd*DIAL)*CENT/VC;

$TABLE double CP = CENT/VC;

$CAPTURE CP
&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mod &amp;lt;- mread(&amp;quot;dialysis&amp;quot;, tempdir(), code) %&amp;gt;% update(end=336, delta=0.25)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Data assembly for doses and dialysis sessions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Set up three weeks of dosing&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;doses &amp;lt;- expand.ev(amt=300, ii=24, addl=13)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;MWF dialysis sessions&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mon &amp;lt;- expand.ev(time=0,ii=7*24,addl=2,cmt=3,evid=8,amt=1)
wed &amp;lt;- mon %&amp;gt;% mutate(time=2*24)
fri &amp;lt;- wed %&amp;gt;% mutate(time=4*24)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Dialysis starts 8 hours after the AM dose&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dial_start &amp;lt;- bind_rows(mon,wed,fri) %&amp;gt;% mutate(time=time+8)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Dialysis lasts 3 hours&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dial_end &amp;lt;- dial_start %&amp;gt;% mutate(time = time+3, amt=0)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Doses and dialysis&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;events &amp;lt;- 
  bind_rows(dial_start,dial_end,doses) %&amp;gt;% 
  arrange(time) %&amp;gt;% as.data.frame %&amp;gt;% as.ev

events&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;. Events:
.   ID time  ii addl cmt evid amt
. 1  1    0  24   13   1    1 300
. 2  1    8 168    2   3    8   1
. 3  1   11 168    2   3    8   0
. 4  1   56 168    2   3    8   1
. 5  1   59 168    2   3    8   0
. 6  1  104 168    2   3    8   1
. 7  1  107 168    2   3    8   0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Simulate&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;out &amp;lt;- mod %&amp;gt;% ev(events) %&amp;gt;%  obsonly %&amp;gt;% mrgsim&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(out)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/topic/model-gallery/figures/unnamed-chunk-43-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;PK plot with dialysis sessions marked in red&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;out %&amp;gt;% as.tbl %&amp;gt;% filter(time &amp;lt;=7*24) %&amp;gt;%
  ggplot(data=., aes(x=time, y=CP)) + geom_line(lwd=1) + 
  geom_path(data=dial,col=&amp;quot;firebrick&amp;quot;, lwd=6, alpha=0.4)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;. Warning: Removed 1 rows containing missing values (geom_path).&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/topic/model-gallery/figures/unnamed-chunk-45-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;references&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;p&gt;J. Gabrielsson and D. Weiner. Pharmacokinetic and Pharmacodynamic Data Analysis: Concepts and Applications, Fourth Edition. Taylor &amp;amp; Francis, 2007.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;session-info&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Session Info&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;devtools::session_info()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;.  setting  value                       
.  version  R version 3.3.2 (2016-10-31)
.  system   x86_64, darwin13.4.0        
.  ui       X11                         
.  language (EN)                        
.  collate  en_US.UTF-8                 
.  tz       America/Chicago             
.  date     2017-02-23                  
. 
.  package       * version     date      
.  assertthat      0.1         2013-12-06
.  backports       1.0.5       2017-01-18
.  blogdown        0.0.22      2017-02-22
.  bookdown        0.3.9       2017-02-22
.  codetools       0.2-15      2016-10-05
.  colorspace      1.3-2       2016-12-14
.  DBI             0.5-1       2016-09-10
.  devtools        1.12.0.9000 2017-01-08
.  digest          0.6.12      2017-01-27
.  dplyr         * 0.5.0       2016-06-24
.  evaluate        0.10        2016-10-11
.  ggplot2       * 2.2.1       2016-12-30
.  gtable          0.2.0       2016-02-26
.  htmltools       0.3.5       2016-03-21
.  knitr         * 1.15.1      2016-11-22
.  labeling        0.3         2014-08-23
.  lattice       * 0.20-34     2016-09-06
.  lazyeval        0.2.0       2016-06-12
.  magrittr      * 1.5         2014-11-22
.  memoise         1.0.0       2016-01-29
.  mrgsolve      * 0.7.10.9005 2017-02-23
.  munsell         0.4.3       2016-02-13
.  pkgbuild        0.0.0.9000  2017-01-07
.  pkgload         0.0.0.9000  2017-01-07
.  plyr            1.8.4       2016-06-08
.  R6              2.2.0       2016-10-05
.  Rcpp            0.12.9      2017-01-14
.  RcppArmadillo   0.7.700.0.0 2017-02-08
.  rmarkdown       1.3         2016-12-21
.  rprojroot       1.2         2017-01-16
.  scales          0.4.1       2016-11-09
.  stringi         1.1.2       2016-10-01
.  stringr         1.2.0       2017-02-18
.  tibble          1.2         2016-08-26
.  tidyr         * 0.6.1       2017-01-10
.  withr           1.0.2       2016-06-20
.  yaml            2.1.14      2016-11-12
.  source                                       
.  CRAN (R 3.3.2)                               
.  cran (@1.0.5)                                
.  Github (rstudio/blogdown@54cbcc6)            
.  Github (rstudio/bookdown@a5ad84c)            
.  CRAN (R 3.3.0)                               
.  CRAN (R 3.3.2)                               
.  CRAN (R 3.3.2)                               
.  Github (hadley/devtools@1ce84b0)             
.  CRAN (R 3.3.2)                               
.  CRAN (R 3.3.2)                               
.  CRAN (R 3.3.0)                               
.  CRAN (R 3.3.2)                               
.  CRAN (R 3.3.2)                               
.  CRAN (R 3.3.2)                               
.  CRAN (R 3.3.2)                               
.  CRAN (R 3.3.2)                               
.  CRAN (R 3.3.0)                               
.  CRAN (R 3.3.2)                               
.  CRAN (R 3.3.2)                               
.  CRAN (R 3.2.1)                               
.  Github (metrumresearchgroup/mrgsolve@6d74d36)
.  CRAN (R 3.3.2)                               
.  Github (r-pkgs/pkgbuild@65eace0)             
.  Github (r-pkgs/pkgload@def2b10)              
.  CRAN (R 3.3.2)                               
.  CRAN (R 3.3.2)                               
.  CRAN (R 3.3.2)                               
.  CRAN (R 3.3.2)                               
.  CRAN (R 3.3.2)                               
.  CRAN (R 3.3.0)                               
.  CRAN (R 3.3.2)                               
.  CRAN (R 3.3.2)                               
.  cran (@1.2.0)                                
.  CRAN (R 3.3.2)                               
.  CRAN (R 3.3.2)                               
.  CRAN (R 3.3.0)                               
.  CRAN (R 3.3.0)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Generating input data sets for mrgsolve</title>
      <link>/2017/01/01/generating-input-data-sets-for-mrgsolve/</link>
      <pubDate>Sun, 01 Jan 2017 13:09:13 -0600</pubDate>
      
      <guid>/2017/01/01/generating-input-data-sets-for-mrgsolve/</guid>
      <description>&lt;!-- BLOGDOWN-HEAD --&gt;



&lt;!-- /BLOGDOWN-HEAD --&gt;

&lt;!-- BLOGDOWN-BODY-BEFORE --&gt;

&lt;!-- /BLOGDOWN-BODY-BEFORE --&gt;

&lt;p&gt;&lt;BR&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(mrgsolve)
library(dplyr)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;input-data-sets&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Input data sets&lt;/h2&gt;
&lt;p&gt;An important mechanism for creating robust, complex simulations is the input data set. Input data sets specify the population of individuals to simulate, including the number of individuals, each individual’s dosing interventions, each individual’s covariate values etc. The input data set is just a plain old &lt;code&gt;R&lt;/code&gt; &lt;code&gt;data.frame&lt;/code&gt;, but with some expectations about which columns are present and expectations for how to handle columns for certain names. For example, every input data set has to have an &lt;code&gt;ID&lt;/code&gt;, &lt;code&gt;time&lt;/code&gt;, and &lt;code&gt;cmt&lt;/code&gt; column. Note that either lower case names (like &lt;code&gt;time&lt;/code&gt; and &lt;code&gt;cmt&lt;/code&gt;) are acceptable as are upper case names (like &lt;code&gt;TIME&lt;/code&gt; and &lt;code&gt;CMT&lt;/code&gt;). But users are not to mix upper and lower case names (like &lt;code&gt;time&lt;/code&gt; and &lt;code&gt;CMT&lt;/code&gt;) for certain column names related to dosing events. The help topic &lt;code&gt;?data_set&lt;/code&gt; discusses more about what the expectations are for input data sets.&lt;/p&gt;
&lt;hr&gt;
&lt;/div&gt;
&lt;div id=&#34;functions-to-generate-input-data-sets&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Functions to generate input data sets&lt;/h2&gt;
&lt;code&gt;mrgsolve&lt;/code&gt; provides several functions and workflows to help you put together the right input data set for your simulation. The main point of this blog post is to review some of these functions to help you better organize your &lt;code&gt;mrgsolve&lt;/code&gt; simulations. Some functions are very simple and you might not find a function to do &lt;strong&gt;exactly&lt;/strong&gt; what you want to do. But we’ve found these functions to be helpful to accomplish tasks that we found ourselves repeating over and over … and thus these tasks were formalized in a function. Just keep in mind that input data sets are just &lt;code&gt;data.frames&lt;/code&gt; … you can use any code or any function (even your own!) to do tasks similar to what these functions are doing.
&lt;hr&gt;
&lt;div id=&#34;expand.ev&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;code&gt;expand.ev&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;expand.ev&lt;/code&gt; is like &lt;code&gt;expand.grid&lt;/code&gt;: it creates a single &lt;code&gt;data.frame&lt;/code&gt; with all combinations of it’s vector arguments. It’s pretty simple but convenient to have. For example,&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data &amp;lt;- expand.ev(amt=c(100,200,300), ID=1:3)
data&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;.   ID amt evid cmt time
. 1  1 100    1   1    0
. 2  2 200    1   1    0
. 3  3 300    1   1    0
. 4  4 100    1   1    0
. 5  5 200    1   1    0
. 6  6 300    1   1    0
. 7  7 100    1   1    0
. 8  8 200    1   1    0
. 9  9 300    1   1    0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This function call gives us 3 individuals at each of 3 doses. The &lt;code&gt;expand.grid&lt;/code&gt; nature of &lt;code&gt;expand.ev&lt;/code&gt; is what gives us &lt;code&gt;3x3=9&lt;/code&gt; rows in the data set. Notice that the &lt;code&gt;IDs&lt;/code&gt; are now 1 through 9 … &lt;code&gt;expand.ev&lt;/code&gt; renumbers &lt;code&gt;IDs&lt;/code&gt; so that there is only one dosing event per row and there is on row per &lt;code&gt;ID&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Also notice that &lt;code&gt;time&lt;/code&gt; defaults to 0, &lt;code&gt;evid&lt;/code&gt; defaults to 1, and &lt;code&gt;cmt&lt;/code&gt; defaults to 1. So, &lt;code&gt;expand.ev&lt;/code&gt; fills in some of the required columns for you.&lt;/p&gt;
&lt;p&gt;Let’s simulate with this data set:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mod &amp;lt;- mrgsolve:::house() %&amp;gt;% Req(CP) 
mod %&amp;gt;% 
  mrgsim(data=data) %&amp;gt;% 
  plot(CP~time|factor(ID),scales=&amp;quot;same&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/2017/01/01/generating-input-data-sets-for-mrgsolve/figures/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto auto auto 0;&#34; /&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;/div&gt;
&lt;div id=&#34;as_data_set&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;code&gt;as_data_set&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;This function allows you to combine several event objects into a single data sets. An example works best to illustrate.&lt;/p&gt;
&lt;p&gt;First, create three event objects. Let’s try one &lt;code&gt;ID&lt;/code&gt; at 100 mg, two &lt;code&gt;IDs&lt;/code&gt; at 200 mg, and 3 &lt;code&gt;IDs&lt;/code&gt; at 300 mg.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;e1 &amp;lt;- ev(amt=100, ID=1)
e2 &amp;lt;- ev(amt=200, ID=1:2)
e3 &amp;lt;- ev(amt=300, ID=1:3)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The events are&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;e1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;. Events:
.   ID time cmt amt evid
. 1  1    0   1 100    1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;e2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;. Events:
.   ID time cmt amt evid
. 1  1    0   1 200    1
. 2  2    0   1 200    1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;e3&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;. Events:
.   ID time cmt amt evid
. 1  1    0   1 300    1
. 2  2    0   1 300    1
. 3  3    0   1 300    1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When we combine these events with &lt;code&gt;as_data_set&lt;/code&gt; we get&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data &amp;lt;- as_data_set(e1,e2,e3)
data&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;.   ID time cmt evid amt
. 1  1    0   1    1 100
. 2  2    0   1    1 200
. 3  3    0   1    1 200
. 4  4    0   1    1 300
. 5  5    0   1    1 300
. 6  6    0   1    1 300&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A nice feature of &lt;code&gt;as_data_set&lt;/code&gt; is, unlike &lt;code&gt;expand.ev&lt;/code&gt; and the previous example, we can use complicated event sequences that are expressed with more than one line in the data set. For example, consider the case where every &lt;code&gt;ID&lt;/code&gt; gets a 250 mg loading dose, and then either get 250 mg q24h, or 120 mg q12h or 500 mg q48h.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;load &amp;lt;- function(n) ev(amt=250, ID=1:n)
e1 &amp;lt;- load(1) + ev(amt=250, time=24, ii=24, addl=3, ID=1)
e2 &amp;lt;- load(2) + ev(amt=125, time=24, ii=12, addl=7, ID=1:2)
e3 &amp;lt;- load(3) + ev(amt=500, time=24, ii=48, addl=1, ID=1:3)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, &lt;code&gt;e1&lt;/code&gt;, &lt;code&gt;e2&lt;/code&gt;, and &lt;code&gt;e3&lt;/code&gt; are more complex&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;e1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;. Events:
.   ID time cmt amt evid ii addl
. 1  1    0   1 250    1  0    0
. 2  1   24   1 250    1 24    3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;e3&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;. Events:
.   ID time cmt amt evid ii addl
. 1  1    0   1 250    1  0    0
. 4  1   24   1 500    1 48    1
. 2  2    0   1 250    1  0    0
. 5  2   24   1 500    1 48    1
. 3  3    0   1 250    1  0    0
. 6  3   24   1 500    1 48    1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But, we can still pull them together in one single data set&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data &amp;lt;- as_data_set(e1,e2,e3)
data&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;.    ID time cmt evid amt ii addl
. 1   1    0   1    1 250  0    0
. 2   1   24   1    1 250 24    3
. 3   2    0   1    1 250  0    0
. 4   2   24   1    1 125 12    7
. 5   3    0   1    1 250  0    0
. 6   3   24   1    1 125 12    7
. 7   4    0   1    1 250  0    0
. 8   4   24   1    1 500 48    1
. 9   5    0   1    1 250  0    0
. 10  5   24   1    1 500 48    1
. 11  6    0   1    1 250  0    0
. 12  6   24   1    1 500 48    1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An example simulation&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(1112)
mod %&amp;gt;% 
  omat(dmat(1,1,1,1)/10) %&amp;gt;% 
  data_set(data) %&amp;gt;% 
  mrgsim() %&amp;gt;% 
  plot&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;/2017/01/01/generating-input-data-sets-for-mrgsolve/figures/unnamed-chunk-13-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto auto auto 0;&#34; /&gt;
&lt;hr&gt;
&lt;/div&gt;
&lt;div id=&#34;as.data.frame.ev&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;code&gt;as.data.frame.ev&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Just a quick reminder here that you can easily convert between a single event object and a &lt;code&gt;data.frame&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;as.data.frame(e3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;.   ID time cmt amt evid ii addl
. 1  1    0   1 250    1  0    0
. 4  1   24   1 500    1 48    1
. 2  2    0   1 250    1  0    0
. 5  2   24   1 500    1 48    1
. 3  3    0   1 250    1  0    0
. 6  3   24   1 500    1 48    1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;as.ev(as.data.frame(e3))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;. Events:
.   ID time cmt amt evid ii addl
. 1  1    0   1 250    1  0    0
. 4  1   24   1 500    1 48    1
. 2  2    0   1 250    1  0    0
. 5  2   24   1 500    1 48    1
. 3  3    0   1 250    1  0    0
. 6  3   24   1 500    1 48    1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So if you were building up an event object and just wanted to use it as a &lt;code&gt;data_set&lt;/code&gt; or as a building block for a &lt;code&gt;data_set&lt;/code&gt;, just coerce with &lt;code&gt;as.data.frame&lt;/code&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;/div&gt;
&lt;div id=&#34;assign_ev&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;code&gt;assign_ev&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;This function assigns an intervention in the form of an event object to individuals in an &lt;code&gt;idata_set&lt;/code&gt; according to a grouping column.&lt;/p&gt;
&lt;p&gt;To illustrate, make a simple &lt;code&gt;idata_set&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(8)
idata &amp;lt;- data_frame(ID=sample(1:6), arm=c(1,2,2,3,3,3))
idata&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;. # A tibble: 6 × 2
.      ID   arm
.   &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt;
. 1     3     1
. 2     2     2
. 3     4     2
. 4     5     3
. 5     1     3
. 6     6     3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, we have 6 &lt;code&gt;IDs&lt;/code&gt;, one in arm 1, two in arm 2, three in arm 3. Let’s take the events from the previous example and assign them to the different arms.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;e1 &amp;lt;- ev(amt=250) + ev(amt=250, time=24, ii=24, addl=3)
e2 &amp;lt;- ev(amt=250) + ev(amt=125, time=24, ii=12, addl=7)
e3 &amp;lt;- ev(amt=250) + ev(amt=500, time=24, ii=48, addl=1)
assign_ev(list(e3,e2,e1),idata,&amp;quot;arm&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;.    time cmt amt evid ii addl ID
. 1     0   1 250    1  0    0  3
. 2    24   1 500    1 48    1  3
. 3     0   1 250    1  0    0  2
. 4    24   1 125    1 12    7  2
. 5     0   1 250    1  0    0  4
. 6    24   1 125    1 12    7  4
. 7     0   1 250    1  0    0  5
. 8    24   1 250    1 24    3  5
. 9     0   1 250    1  0    0  1
. 10   24   1 250    1 24    3  1
. 11    0   1 250    1  0    0  6
. 12   24   1 250    1 24    3  6&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Please look carefully at the input (&lt;code&gt;idata&lt;/code&gt; and &lt;code&gt;list(e3,e2,e1)&lt;/code&gt;); I have mixed it up a bit here to try to illustrate how things are assigned.&lt;/p&gt;
&lt;hr&gt;
&lt;/div&gt;
&lt;div id=&#34;ev_days&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;code&gt;ev_days&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;This is a recently-added function (hint: you might need to install the latest version from GitHub to use this) that lets you schedule certain events on certain days of the week, repeating in a weekly cycle.&lt;/p&gt;
&lt;p&gt;For example, to schedule 250 mg doses every Monday, Wednesday, and Friday for a month, you can do&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data &amp;lt;- ev_days(ev(amt=250, ID=1), days=&amp;quot;m,w,f&amp;quot;, addl=3)
data&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;.   ID time cmt amt evid  ii addl
. 1  1    0   1 250    1 168    3
. 2  1   48   1 250    1 168    3
. 3  1   96   1 250    1 168    3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mod %&amp;gt;% mrgsim(data=data,end=168*4) %&amp;gt;% plot&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/2017/01/01/generating-input-data-sets-for-mrgsolve/figures/unnamed-chunk-17-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto auto auto 0;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Or, you can do 100 mg doses on Monday, Wednesday, Friday, and 50 mg doses on Tuesday, Thursday, with drug holiday on weekends&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;e1 &amp;lt;- ev(amt=100,ID=1)
e2 &amp;lt;- ev(amt=50,ID=1)
data &amp;lt;- ev_days(m=e1,w=e1,f=e1,t=e2,th=e2,addl=3)
data&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;.   ID time cmt amt evid  ii addl
. 1  1    0   1 100    1 168    3
. 2  1   24   1  50    1 168    3
. 3  1   48   1 100    1 168    3
. 4  1   72   1  50    1 168    3
. 5  1   96   1 100    1 168    3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And simulate&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mod %&amp;gt;% mrgsim(data=data,end=168*4) %&amp;gt;% plot&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/2017/01/01/generating-input-data-sets-for-mrgsolve/figures/unnamed-chunk-19-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto auto auto 0;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The same thing can be accomplished like this&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;a &amp;lt;- ev_days(e1,days=&amp;quot;m,w,f&amp;quot;,addl=3)
b &amp;lt;- ev_days(e2,days=&amp;quot;t,th&amp;quot;,addl=3)

c(as.ev(a),as.ev(b))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;. Events:
.   ID time cmt amt evid  ii addl
. 1  1    0   1 100    1 168    3
. 4  1   24   1  50    1 168    3
. 2  1   48   1 100    1 168    3
. 5  1   72   1  50    1 168    3
. 3  1   96   1 100    1 168    3&lt;/code&gt;&lt;/pre&gt;
You can use this as an event object or just coerce to &lt;code&gt;data.frame&lt;/code&gt; to use as a &lt;code&gt;data_set&lt;/code&gt;.
&lt;hr&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;filter-input-data-set-inline&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Filter input data set inline&lt;/h2&gt;
&lt;p&gt;Remember, when you pass in your input data set via &lt;code&gt;data_set&lt;/code&gt;, you can filter in line:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data &amp;lt;- expand.ev(amt=c(100,200,300))
mod %&amp;gt;% data_set(data, amt==300) %&amp;gt;% Req(GUT,CP) %&amp;gt;% mrgsim&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;. Model:  housemodel.cpp 
. Dim:    482 x 4 
. Time:   0 to 120 
. ID:     1 
.      ID time    GUT     CP
. [1,]  3 0.00   0.00  0.000
. [2,]  3 0.00 300.00  0.000
. [3,]  3 0.25 222.25  3.862
. [4,]  3 0.50 164.64  6.676
. [5,]  3 0.75 121.97  8.712
. [6,]  3 1.00  90.36 10.174
. [7,]  3 1.25  66.94 11.211
. [8,]  3 1.50  49.59 11.934&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Work with event objects</title>
      <link>/topic/events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/topic/events/</guid>
      <description>&lt;!-- BLOGDOWN-HEAD --&gt;



&lt;!-- /BLOGDOWN-HEAD --&gt;

&lt;!-- BLOGDOWN-BODY-BEFORE --&gt;

&lt;!-- /BLOGDOWN-BODY-BEFORE --&gt;

&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(mrgsolve)
library(dplyr)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Event objects are simple ways to implement PK dosing events into your model simulation.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;setup&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Setup&lt;/h1&gt;
&lt;p&gt;Let’s illustrate event objects with a one-compartment, PK model. We read this model from the &lt;code&gt;mrgsolve&lt;/code&gt; internal model library.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mod &amp;lt;- mread(&amp;quot;pk1cmt&amp;quot;, modlib(), end=216, delta=0.1)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;events&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Events&lt;/h1&gt;
&lt;p&gt;Events are constructed with the &lt;code&gt;ev&lt;/code&gt; function&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;e &amp;lt;- ev(amt=100, ii=24, addl=6)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will implement 100 unit doses every 24 hours for a total of 7 doses. &lt;code&gt;e&lt;/code&gt; has class &lt;code&gt;ev&lt;/code&gt;, but really it is just a data frame&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;e&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;. Events:
.   time cmt amt ii addl evid
. 1    0   1 100 24    6    1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;as.data.frame(e)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;.   time cmt amt ii addl evid
. 1    0   1 100 24    6    1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can implement this series of doses by passing &lt;code&gt;e&lt;/code&gt; in as the &lt;code&gt;events&lt;/code&gt; argument to &lt;code&gt;mrgsim&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mod %&amp;gt;% mrgsim(events=e) %&amp;gt;% plot(EV1+CP~time)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/topic/events/figures/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The events can also be implemented with the &lt;code&gt;ev&lt;/code&gt; constructor along the simulation pipeline&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mod %&amp;gt;%
  ev(amt=100, ii=24, addl=6) %&amp;gt;%
  mrgsim %&amp;gt;% 
  plot(CP~time)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/topic/events/figures/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;event-expectations&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Event expectations&lt;/h1&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;code&gt;amt&lt;/code&gt; is required&lt;/li&gt;
&lt;li&gt;&lt;code&gt;evid=0&lt;/code&gt; is forbidden&lt;/li&gt;
&lt;li&gt;Default &lt;code&gt;time&lt;/code&gt; is 0&lt;/li&gt;
&lt;li&gt;Default &lt;code&gt;evid&lt;/code&gt; is 1&lt;/li&gt;
&lt;li&gt;Default &lt;code&gt;cmt&lt;/code&gt; is 1&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Also by default, &lt;code&gt;rate&lt;/code&gt;, &lt;code&gt;ss&lt;/code&gt; and &lt;code&gt;ii&lt;/code&gt; are 0.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;combine-events&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Combine events&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;mrgsolve&lt;/code&gt; has operators defined that allow you to combine events. Let’s first define some event objects.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;e1 &amp;lt;- ev(amt=500)
e2 &amp;lt;- ev(amt=250, ii=24, addl=4)
e3 &amp;lt;- ev(amt=500, ii=24, addl=0)
e4 &amp;lt;- ev(amt=250, ii=24, addl=4, time=24)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can combine &lt;code&gt;e1&lt;/code&gt; and &lt;code&gt;e3&lt;/code&gt; with a collection operator&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;c(e1,e4)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;. Events:
.   time cmt amt evid ii addl
. 1    0   1 500    1  0    0
. 2   24   1 250    1 24    4&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;mrgsolve&lt;/code&gt; also defines a &lt;code&gt;%then$&lt;/code&gt; operator that lets you execute one event and &lt;code&gt;%then%&lt;/code&gt; a second event&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;e3 %then% e2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;. Events:
.   time cmt amt ii addl evid
. 1    0   1 500 24    0    1
. 2   24   1 250 24    4    1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice that &lt;code&gt;e3&lt;/code&gt; has both &lt;code&gt;ii&lt;/code&gt; and &lt;code&gt;addl&lt;/code&gt; defined. This is required for &lt;code&gt;mrgsolve&lt;/code&gt; to know when to start &lt;code&gt;e2&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;combine-event-objects-to-create-a-data-set&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Combine event objects to create a data set&lt;/h1&gt;
&lt;p&gt;We can take several event objects and combine them into a single simulation data frame with the &lt;code&gt;as_data_set&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;e1 &amp;lt;- ev(amt=100, ii=24, addl=6, ID=1:5)
e2 &amp;lt;- ev(amt=50,  ii=12, addl=13, ID=1:3)
e3 &amp;lt;- ev(amt=200, ii=24, addl=2, ID=1:2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When combined into a data set, we get * N=5 IDs receiving 100 mg Q24h x7 * N=3 IDs receiving 50 mg Q12h x 14 * N=2 IDs receiving 200 mg Q48h x 3&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data &amp;lt;- as_data_set(e1,e2,e3)

data&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;.    ID time cmt evid amt ii addl
. 1   1    0   1    1 100 24    6
. 2   2    0   1    1 100 24    6
. 3   3    0   1    1 100 24    6
. 4   4    0   1    1 100 24    6
. 5   5    0   1    1 100 24    6
. 6   6    0   1    1  50 12   13
. 7   7    0   1    1  50 12   13
. 8   8    0   1    1  50 12   13
. 9   9    0   1    1 200 24    2
. 10 10    0   1    1 200 24    2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To simulate from this data set, we use the &lt;code&gt;data_set&lt;/code&gt; function. First, let’s load a population PK model&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mod &amp;lt;- mread(&amp;quot;popex&amp;quot;, modlib())&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mod %&amp;gt;% data_set(data) %&amp;gt;% mrgsim(end=336) %&amp;gt;% plot(GUT+DV ~  .)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/topic/events/figures/unnamed-chunk-13-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
