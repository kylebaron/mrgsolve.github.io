<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Events on mrgsolve</title>
    <link>/tags/events/index.xml</link>
    <description>Recent content in Events on mrgsolve</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/tags/events/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Work with event objects</title>
      <link>/topic/events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/topic/events/</guid>
      <description>&lt;!-- BLOGDOWN-HEAD --&gt;



&lt;!-- /BLOGDOWN-HEAD --&gt;

&lt;!-- BLOGDOWN-BODY-BEFORE --&gt;

&lt;!-- /BLOGDOWN-BODY-BEFORE --&gt;

&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(mrgsolve)
library(dplyr)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Event objects are simple ways to implement PK dosing events into your model simulation.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;setup&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Setup&lt;/h1&gt;
&lt;p&gt;Let’s illustrate event objects with a one-compartment, PK model. We read this model from the &lt;code&gt;mrgsolve&lt;/code&gt; internal model library.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mod &amp;lt;- mread(&amp;quot;pk1cmt&amp;quot;, modlib(), end=216, delta=0.1)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;events&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Events&lt;/h1&gt;
&lt;p&gt;Events are constructed with the &lt;code&gt;ev&lt;/code&gt; function&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;e &amp;lt;- ev(amt=100, ii=24, addl=6)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will implement 100 unit doses every 24 hours for a total of 7 doses. &lt;code&gt;e&lt;/code&gt; has class &lt;code&gt;ev&lt;/code&gt;, but really it is just a data frame&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;e&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;. Events:
.   time cmt amt ii addl evid
. 1    0   1 100 24    6    1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;as.data.frame(e)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;.   time cmt amt ii addl evid
. 1    0   1 100 24    6    1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can implement this series of doses by passing &lt;code&gt;e&lt;/code&gt; in as the &lt;code&gt;events&lt;/code&gt; argument to &lt;code&gt;mrgsim&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mod %&amp;gt;% mrgsim(events=e) %&amp;gt;% plot(EV1+CP~time)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;#####content/topic/events_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The events can also be implemented with the &lt;code&gt;ev&lt;/code&gt; constructor along the simulation pipeline&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mod %&amp;gt;%
  ev(amt=100, ii=24, addl=6) %&amp;gt;%
  mrgsim %&amp;gt;% 
  plot(CP~time)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;#####content/topic/events_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;event-expectations&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Event expectations&lt;/h1&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;code&gt;amt&lt;/code&gt; is required&lt;/li&gt;
&lt;li&gt;&lt;code&gt;evid=0&lt;/code&gt; is forbidden&lt;/li&gt;
&lt;li&gt;Default &lt;code&gt;time&lt;/code&gt; is 0&lt;/li&gt;
&lt;li&gt;Default &lt;code&gt;evid&lt;/code&gt; is 1&lt;/li&gt;
&lt;li&gt;Default &lt;code&gt;cmt&lt;/code&gt; is 1&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Also by default, &lt;code&gt;rate&lt;/code&gt;, &lt;code&gt;ss&lt;/code&gt; and &lt;code&gt;ii&lt;/code&gt; are 0.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;combine-events&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Combine events&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;mrgsolve&lt;/code&gt; has operators defined that allow you to combine events. Let’s first define some event objects.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;e1 &amp;lt;- ev(amt=500)
e2 &amp;lt;- ev(amt=250, ii=24, addl=4)
e3 &amp;lt;- ev(amt=500, ii=24, addl=0)
e4 &amp;lt;- ev(amt=250, ii=24, addl=4, time=24)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can combine &lt;code&gt;e1&lt;/code&gt; and &lt;code&gt;e3&lt;/code&gt; with a collection operator&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;c(e1,e4)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;. Events:
.   time cmt amt evid ii addl
. 1    0   1 500    1  0    0
. 2   24   1 250    1 24    4&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;mrgsolve&lt;/code&gt; also defines a &lt;code&gt;%then$&lt;/code&gt; operator that lets you execute one event and &lt;code&gt;%then%&lt;/code&gt; a second event&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;e3 %then% e2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;. Events:
.   time cmt amt ii addl evid
. 1    0   1 500 24    0    1
. 2   24   1 250 24    4    1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice that &lt;code&gt;e3&lt;/code&gt; has both &lt;code&gt;ii&lt;/code&gt; and &lt;code&gt;addl&lt;/code&gt; defined. This is required for &lt;code&gt;mrgsolve&lt;/code&gt; to know when to start &lt;code&gt;e2&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;combine-event-objects-to-create-a-data-set&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Combine event objects to create a data set&lt;/h1&gt;
&lt;p&gt;We can take several event objects and combine them into a single simulation data frame with the &lt;code&gt;as_data_set&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;e1 &amp;lt;- ev(amt=100, ii=24, addl=6, ID=1:5)
e2 &amp;lt;- ev(amt=50,  ii=12, addl=13, ID=1:3)
e3 &amp;lt;- ev(amt=200, ii=24, addl=2, ID=1:2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When combined into a data set, we get * N=5 IDs receiving 100 mg Q24h x7 * N=3 IDs receiving 50 mg Q12h x 14 * N=2 IDs receiving 200 mg Q48h x 3&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data &amp;lt;- as_data_set(e1,e2,e3)

data&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;.    ID time cmt evid amt ii addl
. 1   1    0   1    1 100 24    6
. 2   2    0   1    1 100 24    6
. 3   3    0   1    1 100 24    6
. 4   4    0   1    1 100 24    6
. 5   5    0   1    1 100 24    6
. 6   6    0   1    1  50 12   13
. 7   7    0   1    1  50 12   13
. 8   8    0   1    1  50 12   13
. 9   9    0   1    1 200 24    2
. 10 10    0   1    1 200 24    2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To simulate from this data set, we use the &lt;code&gt;data_set&lt;/code&gt; function. First, let’s load a population PK model&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mod &amp;lt;- mread(&amp;quot;popex&amp;quot;, modlib())&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mod %&amp;gt;% data_set(data) %&amp;gt;% mrgsim(end=336) %&amp;gt;% plot(GUT+DV ~  .)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;#####content/topic/events_files/figure-html/unnamed-chunk-13-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>