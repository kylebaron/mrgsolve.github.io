<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Initial Conditions on mrgsolve</title>
    <link>/tags/initial-conditions/index.xml</link>
    <description>Recent content in Initial Conditions on mrgsolve</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/tags/initial-conditions/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Setting initial conditions</title>
      <link>/2017/02/25/setting-initial-conditions/</link>
      <pubDate>Sat, 25 Feb 2017 23:00:00 +0000</pubDate>
      
      <guid>/2017/02/25/setting-initial-conditions/</guid>
      <description>&lt;!-- BLOGDOWN-HEAD --&gt;



&lt;!-- /BLOGDOWN-HEAD --&gt;

&lt;!-- BLOGDOWN-BODY-BEFORE --&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#short-answer&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1&lt;/span&gt; Short answer&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#set-initials-in-main&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.1&lt;/span&gt; Set initials in &lt;code&gt;$MAIN&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#set-initials-in-the-init-list&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.2&lt;/span&gt; Set initials in the &lt;code&gt;init&lt;/code&gt; list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#dont-use-initial-conditions-as-a-dosing-mechanism&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.3&lt;/span&gt; Don’t use initial conditions as a dosing mechanism&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#long-answer&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2&lt;/span&gt; Long answer&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#make-a-model-only-to-examine-init-behavior&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.1&lt;/span&gt; Make a model only to examine &lt;code&gt;init&lt;/code&gt; behavior&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#example-pkpd-model-with-initial-condition&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.2&lt;/span&gt; Example PK/PD model with initial condition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#calling-init-will-let-you-check-to-see-what-is-going-on&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.3&lt;/span&gt; Calling &lt;code&gt;init&lt;/code&gt; will let you check to see what is going on&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#extra-bonus-set-initial-conditions-via-idata&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3&lt;/span&gt; Extra bonus: set initial conditions via &lt;code&gt;idata&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#session-info&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4&lt;/span&gt; Session Info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;!-- /BLOGDOWN-BODY-BEFORE --&gt;

&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(mrgsolve)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;short-answer&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; Short answer&lt;/h1&gt;
&lt;p&gt;There are two commonly-used ways to set initial conditions: in &lt;code&gt;$MAIN&lt;/code&gt; and in the initial condition list.&lt;/p&gt;
&lt;div id=&#34;set-initials-in-main&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1&lt;/span&gt; Set initials in &lt;code&gt;$MAIN&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;For a compartment called &lt;code&gt;CMT&lt;/code&gt;, there is a variable available to you called &lt;code&gt;CMT_0&lt;/code&gt; that you can use to set the initial condition of that compartment in &lt;code&gt;$MAIN&lt;/code&gt;. For example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;code &amp;lt;- &amp;#39;
$PARAM KIN = 200, KOUT = 50

$CMT RESP

$MAIN
RESP_0 = KIN/KOUT;
&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is the most commonly-used way to set initial conditions: the initial condition for the &lt;code&gt;RESP&lt;/code&gt; compartment is set equal to &lt;code&gt;KIN&lt;/code&gt; divided by &lt;code&gt;KOUT&lt;/code&gt;. If you had a parameter called &lt;code&gt;BASE&lt;/code&gt;, you could also write &lt;code&gt;RESP_0 = BASE;&lt;/code&gt;. In these examples, we’re using data items from &lt;code&gt;$PARAM&lt;/code&gt;. But the initial condition could be set to any numeric value in the model, including individual parameters derived from parameters, covariates, and random effects. Note that you should never declare &lt;code&gt;RESP_0&lt;/code&gt; (e.g. &lt;code&gt;double RESP_0&lt;/code&gt;): it just appears for you to use.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;set-initials-in-the-init-list&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.2&lt;/span&gt; Set initials in the &lt;code&gt;init&lt;/code&gt; list&lt;/h2&gt;
&lt;p&gt;You can also set initial conditions in the initials list. Most commonly, this means declaring compartments with &lt;code&gt;$INIT&lt;/code&gt; rather than &lt;code&gt;$CMT&lt;/code&gt;. For example&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;code &amp;lt;- &amp;#39;
$INIT RESP = 4
&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This method gets us the same result as the previous example, however the initial condition now is not a derived value, but it is coded as a number. Alternatively, you could declare a compartment via &lt;code&gt;$CMT&lt;/code&gt; and update later (see next).&lt;/p&gt;
&lt;p&gt;We can update this value later like this&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mod &amp;lt;- mcode(&amp;quot;init_up&amp;quot;, code)

init(mod)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;. 
.  Model initial conditions (N=1):
.  name       value . name    value
.  RESP (1)   4     | . ...   .&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;init(mod, RESP=8) %&amp;gt;% init&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;. 
.  Model initial conditions (N=1):
.  name       value . name    value
.  RESP (1)   8     | . ...   .&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This method is commonly used to set initial conditions in large QSP models where the compartment starts out as some known or assumed steady state value.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;dont-use-initial-conditions-as-a-dosing-mechanism&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.3&lt;/span&gt; Don’t use initial conditions as a dosing mechanism&lt;/h2&gt;
&lt;p&gt;Using an initial condition to put a starting dose in a compartment is not recommended. Always use a dosing event for that.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;long-answer&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;2&lt;/span&gt; Long answer&lt;/h1&gt;
&lt;p&gt;The following is from a wiki post I did on the topic. It’s pedantic. But hopefully helpful to learn what &lt;code&gt;mrgsolve&lt;/code&gt; is doing for those who want to know.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mrgsolve&lt;/code&gt; keeps a base list of compartments and initial conditions that you can update &lt;strong&gt;either&lt;/strong&gt; from &lt;code&gt;R&lt;/code&gt; or from inside the model specification
&lt;ul&gt;
&lt;li&gt;When you use &lt;code&gt;$CMT&lt;/code&gt;, the value in that base list is assumed to be 0 for every compartment&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mrgsolve&lt;/code&gt; will by default use the values in that base list when starting the problem&lt;/li&gt;
&lt;li&gt;When only the base list is available, every individual will get the same initial condition&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;You can &lt;strong&gt;override&lt;/strong&gt; this base list by including code in &lt;code&gt;$MAIN&lt;/code&gt; to set the initial condition
&lt;ul&gt;
&lt;li&gt;Most often, you do this so that the initial is calculated as a function of a parameter&lt;/li&gt;
&lt;li&gt;For example, &lt;code&gt;$MAIN RESP_0 = KIN/KOUT;&lt;/code&gt; when &lt;code&gt;KIN&lt;/code&gt; and &lt;code&gt;KOUT&lt;/code&gt; have some value in &lt;code&gt;$PARAM&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;This code in &lt;code&gt;$MAIN&lt;/code&gt; overwrites the value in the base list for the current &lt;code&gt;ID&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;For typical PK/PD type models, we most frequently initialize in &lt;code&gt;$MAIN&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;This is equivalent to what you might do in your NONMEM model&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;For larger systems models, we often just set the initial value via the base list&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;make-a-model-only-to-examine-init-behavior&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.1&lt;/span&gt; Make a model only to examine &lt;code&gt;init&lt;/code&gt; behavior&lt;/h2&gt;
&lt;p&gt;Note: &lt;code&gt;IFLAG&lt;/code&gt; is my invention only for this demo. The demo is always responsible for setting and interpreting the value (it is not reserved in any way and &lt;code&gt;mrgsolve&lt;/code&gt; does not control the value).&lt;/p&gt;
&lt;p&gt;For this demo&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Compartment &lt;code&gt;A&lt;/code&gt; initial condition defaults to 0&lt;/li&gt;
&lt;li&gt;Compartment &lt;code&gt;A&lt;/code&gt; initial condition will get set to &lt;code&gt;BASE&lt;/code&gt; &lt;strong&gt;only&lt;/strong&gt; if &lt;code&gt;IFLAG  &amp;gt; 0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Compartment &lt;code&gt;A&lt;/code&gt; always stays at the initial condition (the system doesn’t advance)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;code &amp;lt;- &amp;#39;
$PARAM BASE=200, IFLAG = 0

$CMT A

$MAIN
if(IFLAG &amp;gt; 0) A_0 = BASE;

$ODE dxdt_A = 0;
&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mod &amp;lt;- mcode(&amp;quot;init_long&amp;quot;,code)
dplot &amp;lt;- function(x) plot(x,ylim=c(0,400))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Check the initial condition&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;init(mod)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;. 
.  Model initial conditions (N=1):
.  name    value . name    value
.  A (1)   0     | . ...   .&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We used &lt;code&gt;$CMT&lt;/code&gt; in the model spec; that implies that the base initial condition for &lt;code&gt;A&lt;/code&gt; is set to 0&lt;/li&gt;
&lt;li&gt;In this chunk, the code in &lt;code&gt;$MAIN&lt;/code&gt; doesn’t get run because &lt;code&gt;IFLAG&lt;/code&gt; is 0&lt;/li&gt;
&lt;li&gt;So, if we don’t update something in &lt;code&gt;$MAIN&lt;/code&gt; the initial condition is as we set it in the base list&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mod %&amp;gt;% mrgsim %&amp;gt;% dplot&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;#####content/post/init_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Next, we update the base initial condition for &lt;code&gt;A&lt;/code&gt; to 100&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Note:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The code in &lt;code&gt;$MAIN&lt;/code&gt; still doesn’t get run because &lt;code&gt;IFLAG&lt;/code&gt; is 0&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mod %&amp;gt;% init(A = 100) %&amp;gt;% mrgsim %&amp;gt;% dplot&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;#####content/post/init_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Now, turn on &lt;code&gt;IFLAG&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Note:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Now, that code in &lt;code&gt;$MAIN&lt;/code&gt; gets run&lt;/li&gt;
&lt;li&gt;&lt;code&gt;A_0&lt;/code&gt; is set to the value of &lt;code&gt;BASE&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mod %&amp;gt;% param(IFLAG=1) %&amp;gt;% mrgsim %&amp;gt;% dplot&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;#####content/post/init_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mod %&amp;gt;% param(IFLAG=1, BASE=300) %&amp;gt;% mrgsim %&amp;gt;% dplot&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;#####content/post/init_files/figure-html/unnamed-chunk-11-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;example-pkpd-model-with-initial-condition&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2&lt;/span&gt; Example PK/PD model with initial condition&lt;/h2&gt;
&lt;p&gt;Just to be clear, there is no need to set any sort of flag to set the initial condition.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;code &amp;lt;- &amp;#39;
$PARAM AUC=0, AUC50 = 75, KIN=200, KOUT=5

$CMT RESP

$MAIN 
RESP_0 = KIN/KOUT;

$ODE
dxdt_RESP = KIN*(1-AUC/(AUC50+AUC)) - KOUT*RESP;
&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mod &amp;lt;- mcode(&amp;quot;init_long2&amp;quot;, code)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The initial condition is set to 40 per the values of &lt;code&gt;KIN&lt;/code&gt; and &lt;code&gt;KOUT&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mod %&amp;gt;% mrgsim %&amp;gt;% plot&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;#####content/post/init_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Even when we change &lt;code&gt;RESP_0&lt;/code&gt; in &lt;code&gt;R&lt;/code&gt;, the calculation in &lt;code&gt;$MAIN&lt;/code&gt; gets the final say&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mod %&amp;gt;% init(RESP=1E9) %&amp;gt;% mrgsim&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;. Model:  init_long2.cpp 
. Dim:    25 x 3 
. Time:   0 to 24 
. ID:     1 
.      ID time RESP
. [1,]  1    0   40
. [2,]  1    1   40
. [3,]  1    2   40
. [4,]  1    3   40
. [5,]  1    4   40
. [6,]  1    5   40
. [7,]  1    6   40
. [8,]  1    7   40&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;calling-init-will-let-you-check-to-see-what-is-going-on&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.3&lt;/span&gt; Calling &lt;code&gt;init&lt;/code&gt; will let you check to see what is going on&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;It’s a good idea to get in the habit of doing this when things aren’t clear&lt;/li&gt;
&lt;li&gt;&lt;code&gt;init&lt;/code&gt; first takes the base initial condition list, then calls &lt;code&gt;$MAIN&lt;/code&gt; and does any calculation you have in there; so the result is the calculated initials&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;init(mod)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;. 
.  Model initial conditions (N=1):
.  name       value . name    value
.  RESP (1)   40    | . ...   .&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mod %&amp;gt;% param(KIN=100) %&amp;gt;% init&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;. 
.  Model initial conditions (N=1):
.  name       value . name    value
.  RESP (1)   20    | . ...   .&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;extra-bonus-set-initial-conditions-via-idata&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;3&lt;/span&gt; Extra bonus: set initial conditions via &lt;code&gt;idata&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;Go back to house model&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mod &amp;lt;- mrgsolve:::house()
init(mod)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;. 
.  Model initial conditions (N=3):
.  name       value . name       value
.  CENT (2)   0     | RESP (3)   50   
.  GUT (1)    0     | . ...      .&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In &lt;code&gt;idata&lt;/code&gt; (only), include a column with &lt;code&gt;CMT_0&lt;/code&gt; (like you’d do in &lt;code&gt;$MAIN&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;When each ID is simulated, the &lt;code&gt;idata&lt;/code&gt; value will override the base initial list for that subject.&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;But note that if &lt;code&gt;CMT_0&lt;/code&gt; is set in &lt;code&gt;$MAIN&lt;/code&gt;, that will override the &lt;code&gt;idata&lt;/code&gt; update.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;idata &amp;lt;- expand.idata(CENT_0 = seq(0,25,1))

idata %&amp;gt;% head&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;.   ID CENT_0
. 1  1      0
. 2  2      1
. 3  3      2
. 4  4      3
. 5  5      4
. 6  6      5&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;out &amp;lt;- 
  mod %&amp;gt;% 
  idata_set(idata) %&amp;gt;% 
  mrgsim(end=40)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(out, CENT~.)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;#####content/post/init_files/figure-html/unnamed-chunk-19-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;session-info&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;4&lt;/span&gt; Session Info&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;. R version 3.3.2 (2016-10-31)
. Platform: x86_64-apple-darwin13.4.0 (64-bit)
. Running under: OS X Mavericks 10.9.5
. 
. locale:
. [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
. 
. attached base packages:
. [1] methods   stats     grDevices utils     datasets  graphics  base     
. 
. other attached packages:
. [1] mrgsolve_0.7.10.9005
. 
. loaded via a namespace (and not attached):
.  [1] Rcpp_0.12.9               bookdown_0.3.9           
.  [3] lattice_0.20-34           codetools_0.2-15         
.  [5] assertthat_0.1            digest_0.6.12            
.  [7] dplyr_0.5.0               rprojroot_1.2            
.  [9] grid_3.3.2                R6_2.2.0                 
. [11] DBI_0.5-1                 backports_1.0.5          
. [13] magrittr_1.5              evaluate_0.10            
. [15] blogdown_0.0.22           stringi_1.1.2            
. [17] lazyeval_0.2.0            RcppArmadillo_0.7.700.0.0
. [19] rmarkdown_1.3             tools_3.3.2              
. [21] stringr_1.2.0             yaml_2.1.14              
. [23] htmltools_0.3.5           knitr_1.15.1             
. [25] tibble_1.2&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>